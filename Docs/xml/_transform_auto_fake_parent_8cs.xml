<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_transform_auto_fake_parent_8cs" kind="file" language="C#">
    <compoundname>TransformAutoFakeParent.cs</compoundname>
    <innerclass refid="class_transform_auto_fake_parent" prot="public">TransformAutoFakeParent</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_unity_engine" kindref="compound">UnityEngine</ref>;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redundant,<sp/>Use<sp/>Unity&apos;s<sp/>own<sp/>Built<sp/>In<sp/>parent<sp/>cosntraint<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ref:<sp/>https://answers.unity.com/questions/518399/simulate-child-parent-relationship.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ref:<sp/>https://answers.unity.com/questions/1614883/moving-objects-together-without-parenting.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="class_transform_auto_fake_parent" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_transform_auto_fake_parent" kindref="compound">TransformAutoFakeParent</ref><sp/>:<sp/>MonoBehaviour</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7" refid="class_transform_auto_fake_parent_1ae6a29480aeb7347c71e2c177bc56ad2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Transform<sp/><ref refid="class_transform_auto_fake_parent_1ae6a29480aeb7347c71e2c177bc56ad2a" kindref="member">parentTransform</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>true,<sp/>will<sp/>attempt<sp/>to<sp/>scale<sp/>the<sp/>child<sp/>accurately<sp/>as<sp/>the<sp/>parent<sp/>scales</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>not<sp/>be<sp/>accurate<sp/>if<sp/>starting<sp/>rotations<sp/>are<sp/>different<sp/>or<sp/>irregular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Experimental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="class_transform_auto_fake_parent_1a9d7e071625c194c9702f28a3e1ae8298" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_transform_auto_fake_parent_1a9d7e071625c194c9702f28a3e1ae8298" kindref="member">attemptChildScale</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector3<sp/>startParentPosition;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>Quaternion<sp/>startParentRotationQ;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector3<sp/>startParentScale;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector3<sp/>startChildPosition;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>Quaternion<sp/>startChildRotationQ;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector3<sp/>startChildScale;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix4x4<sp/>parentMatrix;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Start()</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startParentPosition<sp/>=<sp/><ref refid="class_transform_auto_fake_parent_1ae6a29480aeb7347c71e2c177bc56ad2a" kindref="member">parentTransform</ref>.position;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startParentRotationQ<sp/>=<sp/><ref refid="class_transform_auto_fake_parent_1ae6a29480aeb7347c71e2c177bc56ad2a" kindref="member">parentTransform</ref>.rotation;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startParentScale<sp/>=<sp/><ref refid="class_transform_auto_fake_parent_1ae6a29480aeb7347c71e2c177bc56ad2a" kindref="member">parentTransform</ref>.lossyScale;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startChildPosition<sp/>=<sp/>transform.position;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startChildRotationQ<sp/>=<sp/>transform.rotation;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startChildScale<sp/>=<sp/>transform.lossyScale;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keeps<sp/>child<sp/>position<sp/>from<sp/>being<sp/>modified<sp/>at<sp/>the<sp/>start<sp/>by<sp/>the<sp/>parent&apos;s<sp/>initial<sp/>transform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startChildPosition<sp/>=</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DivideVectors(Quaternion.Inverse(<ref refid="class_transform_auto_fake_parent_1ae6a29480aeb7347c71e2c177bc56ad2a" kindref="member">parentTransform</ref>.rotation)<sp/>*<sp/>(startChildPosition<sp/>-<sp/>startParentPosition),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startParentScale);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Update()</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentMatrix<sp/>=<sp/>Matrix4x4.TRS(<ref refid="class_transform_auto_fake_parent_1ae6a29480aeb7347c71e2c177bc56ad2a" kindref="member">parentTransform</ref>.position,<sp/><ref refid="class_transform_auto_fake_parent_1ae6a29480aeb7347c71e2c177bc56ad2a" kindref="member">parentTransform</ref>.rotation,<sp/><ref refid="class_transform_auto_fake_parent_1ae6a29480aeb7347c71e2c177bc56ad2a" kindref="member">parentTransform</ref>.lossyScale);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform.position<sp/>=<sp/>parentMatrix.MultiplyPoint3x4(startChildPosition);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform.rotation<sp/>=</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="class_transform_auto_fake_parent_1ae6a29480aeb7347c71e2c177bc56ad2a" kindref="member">parentTransform</ref>.rotation<sp/>*<sp/>Quaternion.Inverse(startParentRotationQ))<sp/>*<sp/>startChildRotationQ;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Incorrect<sp/>scale<sp/>code;<sp/>it<sp/>scales<sp/>the<sp/>child<sp/>locally<sp/>not<sp/>gloabally;<sp/>Might<sp/>work<sp/>in<sp/>some<sp/>cases,<sp/>but<sp/>will<sp/>be<sp/>inaccurate<sp/>in<sp/>others</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_transform_auto_fake_parent_1a9d7e071625c194c9702f28a3e1ae8298" kindref="member">attemptChildScale</ref>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform.localScale<sp/>=</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3.Scale(startChildScale,<sp/>DivideVectors(<ref refid="class_transform_auto_fake_parent_1ae6a29480aeb7347c71e2c177bc56ad2a" kindref="member">parentTransform</ref>.lossyScale,<sp/>startParentScale));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scale<sp/>code<sp/>2;<sp/>I<sp/>was<sp/>working<sp/>on<sp/>to<sp/>scale<sp/>the<sp/>child<sp/>globally<sp/>through<sp/>it&apos;s<sp/>local<sp/>scale,<sp/>but<sp/>turned<sp/>out<sp/>to<sp/>be<sp/>impossible<sp/>using<sp/>localScale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>modVec;</highlight></codeline>
<codeline lineno="59"><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>angleX<sp/>=<sp/>Mathf.Abs(Vector3.Angle(transform.right,<sp/>parentTransform.right));</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modVec.x<sp/>=<sp/>Mathf.Abs(angleX<sp/>-<sp/>90)<sp/>/<sp/>90;</highlight></codeline>
<codeline lineno="63"><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>angleY<sp/>=<sp/>Mathf.Abs(Vector3.Angle(transform.up,<sp/>parentTransform.up));</highlight></codeline>
<codeline lineno="65"><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modVec.y<sp/>=<sp/>Mathf.Abs(angleY<sp/>-<sp/>90)<sp/>/<sp/>90;</highlight></codeline>
<codeline lineno="67"><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>angleZ<sp/>=<sp/>Mathf.Abs(Vector3.Angle(transform.forward,<sp/>parentTransform.forward));</highlight></codeline>
<codeline lineno="69"><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modVec.z<sp/>=<sp/>Mathf.Abs(angleZ<sp/>-<sp/>90)<sp/>/<sp/>90;</highlight></codeline>
<codeline lineno="71"><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform.localScale<sp/>=<sp/>Vector3.Scale(startChildScale,<sp/>Vector3.Scale(DivideVectors(parentTransform.lossyScale,<sp/>startParentScale),<sp/>modVec));</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector3<sp/>DivideVectors(Vector3<sp/>num,<sp/>Vector3<sp/>den)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3(num.x<sp/>/<sp/>den.x,<sp/>num.y<sp/>/<sp/>den.y,<sp/>num.z<sp/>/<sp/>den.z);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_SSDSPEEDUP/2021/clone/gps1_manadesigner/GPS1-Manadesigner/Assets/_UtilsV0.4/MyScripts/_Utils/_CommonV0.2/Redundant/TransformAutoFakeParent.cs"/>
  </compounddef>
</doxygen>
