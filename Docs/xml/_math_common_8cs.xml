<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_math_common_8cs" kind="file" language="C#">
    <compoundname>MathCommon.cs</compoundname>
    <innerclass refid="class_math_common" prot="public">MathCommon</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>System.Collections.Generic;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_unity_engine" kindref="compound">UnityEngine</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespace_unity_engine" kindref="compound">UnityEngine</ref>.UI;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Static<sp/>Class<sp/>for<sp/>Math<sp/>Related<sp/>methods<sp/>//<sp/>Our<sp/>Own<sp/>Custom<sp/>Mathf<sp/>Like<sp/>Class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="class_math_common" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_math_common" kindref="compound">MathCommon</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#region<sp/>OnGUI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="class_math_common_1ac7a4bc3c7bc91a9fc29e028dfd772abe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_math_common_1ac7a4bc3c7bc91a9fc29e028dfd772abe" kindref="member">CalculateSliderValuePercentage</ref>(Slider<sp/>sliderUI,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>currValue,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxValue,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lerpTime)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lerpValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxValue<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>divide<sp/>by<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sliderUI<sp/>!=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lerpValue<sp/>=<sp/>Mathf.Clamp(Mathf.Lerp(sliderUI.value,<sp/>currValue<sp/>/<sp/>maxValue,<sp/>lerpTime),<sp/>0,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>Sliders<sp/>cannot<sp/>be<sp/>negative,<sp/>so<sp/>this<sp/>has<sp/>to<sp/>be<sp/>clamped<sp/>for<sp/>visual<sp/>purposes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sliderUI.value<sp/>=<sp/>lerpValue;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>slider<sp/>value<sp/>as<sp/>Percentage<sp/>in<sp/>decimal<sp/>float<sp/>format<sp/>between<sp/>0.0<sp/>to<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sliderUI.value;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>lerpValue;<sp/><sp/>//<sp/>for<sp/>debug.log<sp/>return<sp/>value<sp/><sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Please<sp/>Follow<sp/>https://docs.unity3d.com/ScriptReference/Mathf.Lerp.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="class_math_common_1aafec06a9d75b7f18a1778638a83e1299" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_math_common_1aafec06a9d75b7f18a1778638a83e1299" kindref="member">CalculateLerpValuePercentage</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>currValue,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxValue,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lerpTime)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lerpValue<sp/>=<sp/>0.001f;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currValue<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>should<sp/>not<sp/>be<sp/>zero,<sp/>could<sp/>cause<sp/>lerping<sp/>bugs,<sp/>replace<sp/>with<sp/>small<sp/>floating<sp/>point<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currValue<sp/>=<sp/>0.001f;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxValue<sp/>!=<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>divide<sp/>by<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lerpTarget<sp/>=<sp/>currValue<sp/>/<sp/>maxValue;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lerpValue<sp/>=<sp/>Mathf.Lerp(lerpValue,<sp/>lerpTarget,<sp/>lerpTime);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debug.Log(</highlight><highlight class="stringliteral">&quot;Lerp<sp/>Value<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>lerpValue<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Lerp<sp/>Target&quot;</highlight><highlight class="normal"><sp/>+<sp/>lerpTarget<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;currValue:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>currValue<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;maxValue:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>maxValue);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>as<sp/>Percentage<sp/>in<sp/>decimal<sp/>float<sp/>format<sp/>between<sp/>-0.0<sp/>to<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lerpValue;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lerpValue<sp/>=<sp/>Mathf.Lerp(lerpValue,<sp/>currValue<sp/>/<sp/>maxValue,<sp/>lerpTime);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endregion<sp/>OnGUI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#region<sp/>Improved<sp/>Mathf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ref:<sp/>https://youtu.be/62IFyHUdH9U?list=PLuLJclBWmeWWe_n5PMPvObez_PATtcxvG<sp/>and<sp/>https://youtu.be/gqU1t1jpmDw?list=PLZpDYt0cyiusT185fsSTEU1ecr8CcTYMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="class_math_common_1a5f063f62f56ada8a64719748e2b2cdc0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_math_common_1a5f063f62f56ada8a64719748e2b2cdc0" kindref="member">lerpLinearVector3</ref>(Vector3<sp/>start,<sp/>Vector3<sp/>end,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStartedLerping,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lerpTime<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeSinceStarted<sp/>=<sp/>Time.time<sp/>-<sp/>timeStartedLerping;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>percentageComplete<sp/>=<sp/>timeStartedLerping<sp/>/<sp/>lerpTime;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>result<sp/>=<sp/>Vector3.Lerp(start,<sp/>end,<sp/>percentageComplete);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56" refid="class_math_common_1ab4f7ab95afc8f01d0166035c7944fd1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_math_common_1ab4f7ab95afc8f01d0166035c7944fd1e" kindref="member">lerpLinearFloat</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>startVal,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>endVal,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeStartedLerping,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lerpTime<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>start<sp/>=<sp/>Vector3.zero;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>end<sp/>=<sp/>Vector3.zero;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start.x<sp/>=<sp/>startVal;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end.x<sp/>=<sp/>endVal;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeSinceStarted<sp/>=<sp/>Time.time<sp/>-<sp/>timeStartedLerping;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>percentageComplete<sp/>=<sp/>timeStartedLerping<sp/>/<sp/>lerpTime;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>Vector3.Lerp(start,<sp/>end,<sp/>percentageComplete).x;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endregion<sp/>Improved<sp/>Mathf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#region<sp/>Color<sp/>Math</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrapper<sp/>for<sp/>Color<sp/>Utilty<sp/>ParseHex<sp/>via<sp/>our<sp/>own<sp/>custom<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="class_math_common_1a147dd0dbf49544bc599778d12f8c15c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Color<sp/><ref refid="class_math_common_1a147dd0dbf49544bc599778d12f8c15c6" kindref="member">ColorParseHex</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>hexValue)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Color<sp/>color<sp/>=<sp/>Color.white;<sp/></highlight><highlight class="comment">//<sp/>default<sp/>color<sp/>will<sp/>be<sp/>returned<sp/>if<sp/>Parsing<sp/>Hex<sp/>value<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColorUtility.TryParseHtmlString(hexValue,<sp/>out<sp/>color);<sp/></highlight><highlight class="comment">//<sp/>out<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>color;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ref:<sp/>https://answers.unity.com/questions/128155/negative-color-scheme.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="class_math_common_1afea37ce7e332955adcafc1360fda3322" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Color<sp/><ref refid="class_math_common_1afea37ce7e332955adcafc1360fda3322" kindref="member">ColorInvert</ref>(Color<sp/>color)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Color(1.0f<sp/>-<sp/>color.r,<sp/>1.0f<sp/>-<sp/>color.g,<sp/>1.0f<sp/>-<sp/>color.b);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endregion<sp/>Color<sp/>Math</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_SSDSPEEDUP/2021/clone/gps1_manadesigner/GPS1-Manadesigner/Assets/_UtilsV0.4/MyScripts/_Utils/_CommonV0.2/Calculation/MathCommon.cs"/>
  </compounddef>
</doxygen>
